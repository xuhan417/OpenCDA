[2022-06-09 12:31:37,816][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 14:29:27,553][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 14:36:03,244][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 14:39:43,139][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 14:50:25,548][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 14:52:13,159][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:10:53,449][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:12:56,787][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:23:01,749][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:24:21,775][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:25:12,971][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:48:31,091][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:49:37,996][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:50:15,938][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:55:56,259][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 15:59:07,004][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:15:03,255][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:15:43,048][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:17:53,131][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:20:20,949][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:21:19,594][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:24:39,253][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:31:45,516][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:35:30,225][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:43:26,004][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:44:52,503][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 16:48:45,220][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 17:21:54,722][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 17:37:06,768][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 17:40:47,834][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 17:44:33,446][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 17:47:43,981][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:09:51,914][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:11:52,730][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:13:03,771][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:16:29,396][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:17:50,371][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:18:37,522][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:19:31,239][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:20:01,351][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:20:39,461][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:21:12,796][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:44:13,053][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:50:19,478][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 18:57:03,005][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 19:09:59,543][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 19:10:32,410][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 19:13:20,427][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 19:20:36,344][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-09 19:25:01,715][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-10 10:44:45,835][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-10 10:58:16,612][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-10 10:59:41,422][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-10 11:01:32,795][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-10 11:04:12,873][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-10 11:05:28,797][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-10 11:07:16,700][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-10 11:18:28,777][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-06-10 13:40:58,558][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-17 19:05:25,245][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-17 19:06:28,091][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-17 19:11:37,615][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-17 23:42:32,639][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-17 23:50:27,210][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-18 00:00:17,377][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-18 00:33:13,082][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-18 00:35:31,877][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-18 00:36:28,571][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-19 22:10:42,514][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-22 12:22:17,214][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-22 12:31:06,429][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-22 12:31:29,945][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-22 12:33:02,707][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-22 12:33:42,091][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-22 12:34:39,491][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-22 12:35:48,646][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-22 12:36:26,049][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
[2022-07-22 12:36:55,914][base_learner.py][line: 333][    INFO] [RANK0]: DI-engine DRL Policy
DQNRLModel(
  (_encoder): BEVSpeedConvEncoder(
    (_relu): ReLU()
    (_model): Sequential(
      (0): Conv2d(5, 64, kernel_size=(3, 3), stride=(2, 2))
      (1): ReLU()
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2))
      (3): ReLU()
      (4): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2))
      (5): ReLU()
      (6): Flatten(start_dim=1, end_dim=-1)
    )
    (_mid): Linear(in_features=2304, out_features=256, bias=True)
  )
  (_head): DuelingHead(
    (A): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=9, bias=True)
      )
    )
    (V): Sequential(
      (0): Sequential(
        (0): Linear(in_features=512, out_features=512, bias=True)
        (1): ReLU()
      )
      (1): Sequential(
        (0): Linear(in_features=512, out_features=1, bias=True)
      )
    )
  )
)
